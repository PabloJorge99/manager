<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Gerenciamento de Lotes</title>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #166088;
            --success-color: #4CAF50;
            --danger-color: #f44336;
            --warning-color: #ff9800;
            --light-gray: #f5f5f5;
            --dark-gray: #333;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        

            background-color: #f9f9f9;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
        }
        
        .auth-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .auth-section input, .auth-section button {
            padding: 8px 12px;
            border-radius: 4px;
            border: none;
        }
        
        .auth-section button {
            background-color: var(--secondary-color);
            color: white;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .auth-section button:hover {
            background-color: #0d4b6e;
        }
        
        nav {
            background-color: var(--secondary-color);
            padding: 10px 0;
        }
        
        .tabs {
            display: flex;
            list-style: none;
        }
        
        .tabs li {
            padding: 10px 20px;
            cursor: pointer;
            color: white;
            transition: background-color 0.3s;
        }
        
        .tabs li.active {
            background-color: var(--primary-color);
            font-weight: bold;
        }
        
        .tabs li:hover:not(.active) {
            background-color: #0d4b6e;
        }
        
        .tab-content {
            display: none;
            padding: 20px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .color-picker {
            width: 50px;
            height: 30px;
            padding: 0;
            border: 1px solid #ddd;
        }
        
        button {
            padding: 10px 15px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: var(--secondary-color);
        }
        
        .lotes-list {
            margin-top: 30px;
            width: 100%;
            border-collapse: collapse;
        }
        
        .lotes-list th, .lotes-list td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .lotes-list th {
            background-color: var(--light-gray);
            font-weight: bold;
        }
        
        .lotes-list tr:hover {
            background-color: #f5f5f5;
        }
        
        .status-cell {
            text-align: center;
        }
        
        .status-btn {
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            border: none;
            color: white;
            font-weight: bold;
        }
        
        .status-btn.feito {
            background-color: var(--success-color);
        }
        
        .status-btn.falta {
            background-color: var(--danger-color);
        }
        
        .priority-list {
            list-style: none;
            margin-top: 20px;
        }
        
        .priority-item {
            background-color: white;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: move;
        }
        
        .priority-item:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .priority-number {
            background-color: var(--primary-color);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
        }
        
        .priority-actions {
            display: flex;
            gap: 10px;
        }
        
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        
        .sortable-ghost {
            opacity: 0.5;
            background: #c8ebfb;
        }
        
        .priority-item.dragging {
            opacity: 0.5;
            background: #c8ebfb;
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .lotes-list {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container header-content">
            <div class="logo">Sistema de Lotes</div>
            <div class="auth-section">
                <input type="text" id="username" placeholder="Usuário">
                <input type="password" id="password" placeholder="Senha">
                <button id="login-btn">Login</button>
            </div>
        </div>
    </header>
    
    <nav>
        <div class="container">
            <ul class="tabs">
                <li class="active" data-tab="planejamento">Planejamento</li>
                <li data-tab="prioridades">Prioridades</li>
            </ul>
        </div>
    </nav>
    
    <div class="container">
        <!-- Tab Planejamento -->
        <div id="planejamento" class="tab-content active">
            <h2>Criar Novo Lote</h2>
            <form id="lote-form">
                <div class="form-group">
                    <label for="lote-numero">Lote:</label>
                    <input type="text" id="lote-numero" required>
                </div>
                
                <div class="form-group">
                    <label for="lote-descricao">Descrição:</label>
                    <textarea id="lote-descricao" rows="3" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="lote-cor">Cor:</label>
                    <input type="color" id="lote-cor" class="color-picker" value="#4a6fa5">
                </div>
                
                <div class="form-group">
                    <label for="lote-data">Data:</label>
                    <input type="date" id="lote-data" required>
                </div>
                
                <button type="submit">Criar Lote</button>
            </form>
            
            <h2>Lista de Lotes</h2>
            <table class="lotes-list">
                <thead>
                    <tr>
                        <th>Lote</th>
                        <th>Descrição</th>
                        <th>Cor</th>
                        <th>Data</th>
                        <th>Programar</th>
                        <th>Cálculo de Nec.</th>
                        <th>Gerar SOC</th>
                        <th>E-mail SOC</th>
                        <th>Gerar OF</th>
                        <th>Impressão</th>
                        <th>Separação</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="lotes-table-body">
                    <!-- Lotes serão inseridos aqui via JavaScript -->
                </tbody>
            </table>
        </div>
        
        <!-- Tab Prioridades -->
        <div id="prioridades" class="tab-content">
            <h2>Lotes em Aberto</h2>
            <p>Arraste e solte para reordenar as prioridades</p>
            
            <ul class="priority-list" id="priority-list">
                <!-- Itens de prioridade serão inseridos aqui via JavaScript -->
            </ul>
            
            <h2>Lotes Concluídos</h2>
            <ul class="priority-list" id="completed-list">
                <!-- Lotes concluídos serão inseridos aqui via JavaScript -->
            </ul>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elementos da UI
            const tabs = document.querySelectorAll('.tabs li');
            const tabContents = document.querySelectorAll('.tab-content');
            const loteForm = document.getElementById('lote-form');
            const lotesTableBody = document.getElementById('lotes-table-body');
            const priorityList = document.getElementById('priority-list');
            const completedList = document.getElementById('completed-list');
            const loginBtn = document.getElementById('login-btn');
            
            // Dados da aplicação
            let lotes = JSON.parse(localStorage.getItem('lotes')) || [];
            let currentUser = localStorage.getItem('currentUser') || null;
            
            // Verificar se há usuário logado
            if (currentUser) {
                document.getElementById('username').value = currentUser;
                document.getElementById('password').style.display = 'none';
                loginBtn.textContent = 'Logout';
            }
            
            // Inicializar a aplicação
            init();
            
            // Event Listeners
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    tab.classList.add('active');
                    document.getElementById(tab.dataset.tab).classList.add('active');
                });
            });
            
            loteForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const loteNumero = document.getElementById('lote-numero').value;
                const loteDescricao = document.getElementById('lote-descricao').value;
                const loteCor = document.getElementById('lote-cor').value;
                const loteData = document.getElementById('lote-data').value;
                
                const novoLote = {
                    id: Date.now().toString(),
                    numero: loteNumero,
                    descricao: loteDescricao,
                    cor: loteCor,
                    data: loteData,
                    etapas: {
                        programar: false,
                        calculo: false,
                        gerarSOC: false,
                        emailSOC: false,
                        gerarOF: false,
                        impressao: false,
                        separacao: false
                    },
                    prioridade: lotes.filter(l => !l.concluido).length + 1,
                    concluido: false
                };
                
                lotes.push(novoLote);
                saveLotes();
                renderLotesTable();
                renderPriorityList();
                
                loteForm.reset();
            });
            
            loginBtn.addEventListener('click', function() {
                if (currentUser) {
                    // Logout
                    currentUser = null;
                    localStorage.removeItem('currentUser');
                    document.getElementById('password').style.display = 'block';
                    loginBtn.textContent = 'Login';
                } else {
                    // Login simples (sem validação real)
                    const username = document.getElementById('username').value;
                    if (username) {
                        currentUser = username;
                        localStorage.setItem('currentUser', username);
                        document.getElementById('password').style.display = 'none';
                        loginBtn.textContent = 'Logout';
                    } else {
                        alert('Por favor, insira um nome de usuário');
                    }
                }
            });
            
            // Inicializar SortableJS para arrastar e soltar
            new Sortable(priorityList, {
                animation: 150,
                ghostClass: 'sortable-ghost',
                onEnd: function() {
                    // Atualizar prioridades após reordenar
                    const items = priorityList.querySelectorAll('.priority-item');
                    items.forEach((item, index) => {
                        const loteId = item.dataset.id;
                        const lote = lotes.find(l => l.id === loteId);
                        if (lote) {
                            lote.prioridade = index + 1;
                        }
                    });
                    
                    saveLotes();
                    renderPriorityList();
                }
            });
            
            // Funções
            function init() {
                renderLotesTable();
                renderPriorityList();
            }
            
            function renderLotesTable() {
                lotesTableBody.innerHTML = '';
                
                lotes.sort((a, b) => {
                    if (a.concluido !== b.concluido) return a.concluido ? 1 : -1;
                    return a.prioridade - b.prioridade;
                }).forEach(lote => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${lote.numero}</td>
                        <td>${lote.descricao}</td>
                        <td><div style="width: 20px; height: 20px; background-color: ${lote.cor};"></div></td>
                        <td>${formatDate(lote.data)}</td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.programar ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="programar">
                                ${lote.etapas.programar ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.calculo ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="calculo">
                                ${lote.etapas.calculo ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.gerarSOC ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="gerarSOC">
                                ${lote.etapas.gerarSOC ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.emailSOC ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="emailSOC">
                                ${lote.etapas.emailSOC ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.gerarOF ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="gerarOF">
                                ${lote.etapas.gerarOF ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.impressao ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="impressao">
                                ${lote.etapas.impressao ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td class="status-cell">
                            <button class="status-btn ${lote.etapas.separacao ? 'feito' : 'falta'}" 
                                    data-id="${lote.id}" data-etapa="separacao">
                                ${lote.etapas.separacao ? 'Feito' : 'Falta'}
                            </button>
                        </td>
                        <td>
                            <button class="edit-btn" data-id="${lote.id}">Editar</button>
                            <button class="delete-btn" data-id="${lote.id}">Excluir</button>
                        </td>
                    `;
                    
                    lotesTableBody.appendChild(row);
                });
                
                // Adicionar event listeners para os botões de status
                document.querySelectorAll('.status-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const loteId = this.dataset.id;
                        const etapa = this.dataset.etapa;
                        toggleEtapaStatus(loteId, etapa);
                    });
                });
                
                // Adicionar event listeners para os botões de edição
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const loteId = this.dataset.id;
                        editLote(loteId);
                    });
                });
                
                // Adicionar event listeners para os botões de exclusão
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const loteId = this.dataset.id;
                        if (confirm('Tem certeza que deseja excluir este lote?')) {
                            deleteLote(loteId);
                        }
                    });
                });
            }
            
            function renderPriorityList() {
                priorityList.innerHTML = '';
                completedList.innerHTML = '';
                
                // Ordenar lotes por prioridade (não concluídos)
                const lotesAbertos = [...lotes]
                    .filter(l => !l.concluido)
                    .sort((a, b) => a.prioridade - b.prioridade);
                
                // Ordenar lotes concluídos por data de conclusão (mais recente primeiro)
                const lotesConcluidos = [...lotes]
                    .filter(l => l.concluido)
                    .sort((a, b) => new Date(b.dataConclusao || 0) - new Date(a.dataConclusao || 0));
                
                // Renderizar lotes abertos
                lotesAbertos.forEach(lote => {
                    const item = document.createElement('li');
                    item.className = 'priority-item';
                    item.dataset.id = lote.id;
                    
                    const progresso = calcularProgresso(lote);
                    
                    item.innerHTML = `
                        <div class="priority-number">${lote.prioridade}</div>
                        <div>
                            <strong>${lote.numero}</strong> - ${lote.descricao}
                            <div style="margin-top: 5px; width: 100%; height: 5px; background-color: #eee;">
                                <div style="width: ${progresso}%; height: 100%; background-color: ${lote.cor};"></div>
                            </div>
                        </div>
                        <div class="priority-actions">
                            <button class="complete-btn" data-id="${lote.id}">Concluir</button>
                        </div>
                    `;
                    
                    priorityList.appendChild(item);
                });
                
                // Renderizar lotes concluídos
                lotesConcluidos.forEach(lote => {
                    const item = document.createElement('li');
                    item.className = 'priority-item completed';
                    item.dataset.id = lote.id;
                    
                    const progresso = calcularProgresso(lote);
                    
                    item.innerHTML = `
                        <div>
                            <strong>${lote.numero}</strong> - ${lote.descricao}
                            <div>Concluído em: ${formatDate(lote.dataConclusao)}</div>
                            <div style="margin-top: 5px; width: 100%; height: 5px; background-color: #eee;">
                                <div style="width: ${progresso}%; height: 100%; background-color: ${lote.cor};"></div>
                            </div>
                        </div>
                        <div class="priority-actions">
                            <button class="reopen-btn" data-id="${lote.id}">Reabrir</button>
                        </div>
                    `;
                    
                    completedList.appendChild(item);
                });
                
                // Adicionar event listeners para os botões de conclusão
                document.querySelectorAll('.complete-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const loteId = this.dataset.id;
                        completeLote(loteId);
                    });
                });
                
                // Adicionar event listeners para os botões de reabertura
                document.querySelectorAll('.reopen-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const loteId = this.dataset.id;
                        reopenLote(loteId);
                    });
                });
            }
            
            function calcularProgresso(lote) {
                const etapas = Object.values(lote.etapas);
                const etapasCompletas = etapas.filter(e => e).length;
                return Math.round((etapasCompletas / etapas.length) * 100);
            }
            
            function toggleEtapaStatus(loteId, etapa) {
                const lote = lotes.find(l => l.id === loteId);
                if (lote) {
                    lote.etapas[etapa] = !lote.etapas[etapa];
                    saveLotes();
                    renderLotesTable();
                    renderPriorityList();
                }
            }
            
            function completeLote(loteId) {
                const lote = lotes.find(l => l.id === loteId);
                if (lote) {
                    lote.concluido = true;
                    lote.dataConclusao = new Date().toISOString().split('T')[0];
                    
                    // Reorganizar prioridades dos lotes restantes
                    lotes.filter(l => !l.concluido && l.prioridade > lote.prioridade)
                        .forEach(l => l.prioridade--);
                    
                    saveLotes();
                    renderLotesTable();
                    renderPriorityList();
                }
            }
            
            function reopenLote(loteId) {
                const lote = lotes.find(l => l.id === loteId);
                if (lote) {
                    lote.concluido = false;
                    lote.prioridade = lotes.filter(l => !l.concluido).length + 1;
                    delete lote.dataConclusao;
                    
                    saveLotes();
                    renderLotesTable();
                    renderPriorityList();
                }
            }
            
            function editLote(loteId) {
                const lote = lotes.find(l => l.id === loteId);
                if (lote) {
                    document.getElementById('lote-numero').value = lote.numero;
                    document.getElementById('lote-descricao').value = lote.descricao;
                    document.getElementById('lote-cor').value = lote.cor;
                    document.getElementById('lote-data').value = lote.data;
                    
                    // Remover o lote antigo
                    lotes = lotes.filter(l => l.id !== loteId);
                    
                    // Scroll para o formulário
                    document.getElementById('lote-form').scrollIntoView({ behavior: 'smooth' });
                }
            }
            
            function deleteLote(loteId) {
                const lote = lotes.find(l => l.id === loteId);
                if (lote) {
                    // Ajustar prioridades se necessário
                    if (!lote.concluido) {
                        lotes.filter(l => !l.concluido && l.prioridade > lote.prioridade)
                            .forEach(l => l.prioridade--);
                    }
                    
                    lotes = lotes.filter(l => l.id !== loteId);
                    saveLotes();
                    renderLotesTable();
                    renderPriorityList();
                }
            }
            
            function saveLotes() {
                localStorage.setItem('lotes', JSON.stringify(lotes));
            }
            
            function formatDate(dateString) {
                if (!dateString) return '';
                const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
                return new Date(dateString).toLocaleDateString('pt-BR', options);
            }
        });
    </script>
</body>
</html>
